default:
  image: node:20-alpine
  tags:
    - gptx

variables:
  AWS_ECR_REGISTRY: $AWS_ECR_REGISTRY
  AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
  IMAGE_REPOSITORY: gptx/portal-web
  NGINX_HTML_DIR: portal
  H5_NGINX_HTML_DIR: portal-h5


workflow:
  name: 'GPTX PORTAL WEB CI/CD'
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - if: $CI_COMMIT_BRANCH == "hotfix/*"
      when: always
    - if: $CI_COMMIT_TAG
      when: always

stages:
  - test
  - build
  - pushImage
  - deploy

#### 1. Test
test-all:
  stage: test
  cache:
    key: pnpm-${CI_COMMIT_REF_SLUG}
    paths:
      - .pnpm-store
      - node_modules
  before_script:
    - npm install -g pnpm
    - pnpm config set store-dir ./pnpm-store

  script:
    - echo "todo run unit test"

#### 2. Build
build:
  stage: build
  cache:
    key: pnpm-${CI_COMMIT_REF_SLUG}
    paths:
      - .pnpm-store
      - node_modules
  before_script:
    - npm install -g pnpm
    - pnpm config set store-dir ./pnpm-store
    - pnpm i
  artifacts:
    paths:
      - packages/portal-pc/dist
      - packages/portal-h5/dist
  script:
    - pnpm build

    - pnpm build:h5

#### 3. Push Image
push:
  image: docker:latest
  stage: pushImage
  dependencies:
    - build
  services:
    - name: docker:dind
      alias: docker
  before_script:
    - docker info
    - apk add --no-cache aws-cli
    - aws --version
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_DEFAULT_REGION

    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ECR_REGISTRY

    - docker build -t $AWS_ECR_REGISTRY/$IMAGE_REPOSITORY:nightly .
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "develop" ]]; then
        docker push $AWS_ECR_REGISTRY/$IMAGE_REPOSITORY:nightly;
      fi

    - |
      if [[ "$CI_COMMIT_TAG" && ! "$CI_COMMIT_TAG" =~ "^(v|V)?[0-9]+\.[0-9]+\.[0-9]+$" ]]; then
        docker tag $AWS_ECR_REGISTRY/$IMAGE_REPOSITORY:nightly $AWS_ECR_REGISTRY/$IMAGE_REPOSITORY:$CI_COMMIT_TAG;
        docker push $AWS_ECR_REGISTRY/$IMAGE_REPOSITORY:$CI_COMMIT_TAG;
      fi

    - |
      if [[ "$CI_COMMIT_TAG" =~ "^(v|V)?[0-9]+\.[0-9]+\.[0-9]+$" ]]; then
        docker tag $AWS_ECR_REGISTRY/$IMAGE_REPOSITORY:nightly $AWS_ECR_REGISTRY/$IMAGE_REPOSITORY:latest;
        docker push $AWS_ECR_REGISTRY/$IMAGE_REPOSITORY:latest;
      fi

#### 4. Deploy
.deploy-base:
  image: linuxserver/openssh-server:latest
  stage: deploy
  before_script:
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/key
    - chmod 600 ~/.ssh/key

deploy-dev:
  needs: [push]
  extends: .deploy-base
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
      when: on_success
  environment:
    name: development
  variables:
    SSH_USER: $SSH_USER
    SSH_HOST: $SSH_HOST_DEV
    SSH_PRIVATE_KEY: $SSH_PRIVATE_KEY
  script:
    - ssh -o StrictHostKeyChecking=no -i ~/.ssh/key $SSH_USER@$SSH_HOST "aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ECR_REGISTRY && docker pull $AWS_ECR_REGISTRY/$IMAGE_REPOSITORY:nightly && docker create --name temp-$NGINX_HTML_DIR-web $AWS_ECR_REGISTRY/$IMAGE_REPOSITORY:nightly && mv -f /var/www/html/$NGINX_HTML_DIR /var/www/html/$NGINX_HTML_DIR-$(date '+%Y%m%d%H%M%S') && docker cp temp-$NGINX_HTML_DIR-web:/usr/share/nginx/html/$NGINX_HTML_DIR /var/www/html/ && docker rm -f temp-$NGINX_HTML_DIR-web"

    - ssh -o StrictHostKeyChecking=no -i ~/.ssh/key $SSH_USER@$SSH_HOST "aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ECR_REGISTRY && docker pull $AWS_ECR_REGISTRY/$IMAGE_REPOSITORY:nightly && docker create --name temp-$H5_NGINX_HTML_DIR-web $AWS_ECR_REGISTRY/$IMAGE_REPOSITORY:nightly && mv -f /var/www/html/$H5_NGINX_HTML_DIR /var/www/html/$H5_NGINX_HTML_DIR-$(date '+%Y%m%d%H%M%S') && docker cp temp-$H5_NGINX_HTML_DIR-web:/usr/share/nginx/html/$H5_NGINX_HTML_DIR /var/www/html/ && docker rm -f temp-$H5_NGINX_HTML_DIR-web"

deploy-test:
  needs: [push]
  extends: .deploy-base
  rules:
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^(v|V)?[0-9]+\.[0-9]+\.[0-9]+$/
      when: on_success
  environment:
    name: testing
  variables:
    SSH_USER: $SSH_USER
    SSH_PRIVATE_KEY: $SSH_PRIVATE_KEY
    SSH_HOST: $SSH_HOST_TEST
  script:
    - ssh -o StrictHostKeyChecking=no -i ~/.ssh/key $SSH_USER@$SSH_HOST "aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ECR_REGISTRY && docker pull $AWS_ECR_REGISTRY/$IMAGE_REPOSITORY:$CI_COMMIT_TAG && docker create --name temp-$NGINX_HTML_DIR-web $AWS_ECR_REGISTRY/$IMAGE_REPOSITORY:$CI_COMMIT_TAG && mv -f /var/www/html/$NGINX_HTML_DIR /var/www/html/$NGINX_HTML_DIR-$(date '+%Y%m%d%H%M%S') && docker cp temp-$NGINX_HTML_DIR-web:/usr/share/nginx/html/$NGINX_HTML_DIR /var/www/html/ && docker rm -f temp-$NGINX_HTML_DIR-web"

    - ssh -o StrictHostKeyChecking=no -i ~/.ssh/key $SSH_USER@$SSH_HOST "aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ECR_REGISTRY && docker pull $AWS_ECR_REGISTRY/$IMAGE_REPOSITORY:$CI_COMMIT_TAG && docker create --name temp-$H5_NGINX_HTML_DIR-web $AWS_ECR_REGISTRY/$IMAGE_REPOSITORY:$CI_COMMIT_TAG && mv -f /var/www/html/$H5_NGINX_HTML_DIR /var/www/html/$H5_NGINX_HTML_DIR-$(date '+%Y%m%d%H%M%S') && docker cp temp-$H5_NGINX_HTML_DIR-web:/usr/share/nginx/html/$H5_NGINX_HTML_DIR /var/www/html/ && docker rm -f temp-$H5_NGINX_HTML_DIR-web"

deploy-pro:
  needs: [push]
  extends: .deploy-base
  rules:
    - if: $CI_COMMIT_TAG =~ /^(v|V)?[0-9]+\.[0-9]+\.[0-9]+$/
      when: manual
  environment:
    name: production
  variables:
    SSH_USER: $SSH_USER
    SSH_HOST: $SSH_HOST_PRO
    SSH_PRIVATE_KEY: $SSH_PRIVATE_KEY
  script:
    - ssh -o StrictHostKeyChecking=no -i ~/.ssh/key $SSH_USER@$SSH_HOST "aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ECR_REGISTRY && docker pull $AWS_ECR_REGISTRY/$IMAGE_REPOSITORY:latest && docker create --name temp-$NGINX_HTML_DIR-web $AWS_ECR_REGISTRY/$IMAGE_REPOSITORY:latest && mv -f /var/www/html/$NGINX_HTML_DIR /var/www/html/$NGINX_HTML_DIR-$(date '+%Y%m%d%H%M%S') && docker cp temp-$NGINX_HTML_DIR-web:/usr/share/nginx/html/$NGINX_HTML_DIR /var/www/html/ && docker rm -f temp-$NGINX_HTML_DIR-web"

    - ssh -o StrictHostKeyChecking=no -i ~/.ssh/key $SSH_USER@$SSH_HOST "aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ECR_REGISTRY && docker pull $AWS_ECR_REGISTRY/$IMAGE_REPOSITORY:latest && docker create --name temp-$H5_NGINX_HTML_DIR-web $AWS_ECR_REGISTRY/$IMAGE_REPOSITORY:latest && mv -f /var/www/html/$H5_NGINX_HTML_DIR /var/www/html/$H5_NGINX_HTML_DIR-$(date '+%Y%m%d%H%M%S') && docker cp temp-$H5_NGINX_HTML_DIR-web:/usr/share/nginx/html/$H5_NGINX_HTML_DIR /var/www/html/ && docker rm -f temp-$H5_NGINX_HTML_DIR-web"
